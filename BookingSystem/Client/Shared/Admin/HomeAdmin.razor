@page "/Admin"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager;

<AuthorizeView>
    <Authorized>
        @if (_userId == "c994ef2c-3ac1-4312-9702-4d5849ea8545")
        {
            <div class="row">
                <div class="col-md-3">
                    <MenuAdmin></MenuAdmin>
                </div>
                <div class="container">
                    <h1>
                        Welcome Admin
                    </h1>

                </div>
            </div>
        }
        else
        {
            <p>No Authorizado</p>
        }


    </Authorized>
    <NotAuthorized>
        <p>No Auth</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    private string _authMessage;
    private string _userId;
    private string _roleName;
    public string userRole = null;
    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();


    }
    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var role = authState.User.IsInRole("Admin");
        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _userId = $"{user.FindFirst(c => c.Type == "sub")?.Value}";
            if (authState.User.IsInRole("Admin"))
            {
                userRole = "Admin";
            }
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
}

