@page "/AgendarCitaForm"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.Security.Claims;
@attribute [Authorize]
@inject IServicioRepositorio ServicioRepo;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IProfesionalRepositorio ProfesionalRepo;
@inject ICitaRepositorio CitaRepo
@inject SweetAlertService swal;

<EditForm Model="Cita" OnSubmit="Guardar">
<div id="booking" class="section">
    <div class="section-center">
        <div class="container">
            <div class="row">
                <div class="col-md-7 col-md-push-5">
                    <div class="booking-cta">
                        <h1>Make your reservation</h1>
                        <p>
                            Lorem ipsum dolor sit amet consectetur adipisicing elit. Animi facere, soluta magnam consectetur molestias itaque
                            ad sint fugit architecto incidunt iste culpa perspiciatis possimus voluptates aliquid consequuntur cumque quasi.
                            Perspiciatis.
                        </p>
                    </div>
                </div>
                <div class="col-md-4 col-md-pull-7">
                    <div class="booking-form">
                            <div class="form-group">
                                    <input hidden @bind-value="Cita.CitaId"/>
                                <span class="form-label">Servicio</span>
                                <select class="form-control" @bind="Cita.ServicioId">
                                    <option></option>
                                    @foreach (var serv in servicios)
                                    {
                                        <option value="@serv.ServicioId">@serv.Nombre</option>
                                    }
                                </select>
                                <br />
                                <span class="form-label">Profesional</span>
                                <select class="form-control" @bind="Cita.ProfesionalId">
                                    <option></option>
                                    @foreach (var pro in profesionales)
                                    {
                                        <option value="@pro.ProfesionalId">@pro.NombreCompleto</option>
                                    }
                                </select>
                                <br />
                                <span class="form-label">Dia</span>
                                <input class="form-control" type="date" required>
                                <br />
                                <span class="form-label">Hora Cita</span>
                                <select class="form-control" @bind="Cita.Hora">
                                    <option></option>
                                    @foreach (var hor in horas)
                                    {
                                        <option value="@hor">@hor</option>
                                    }
                                </select>
                                <br />
                            </div>
                            <div class="form-btn">
                                <button class="submit-btn">Verificar Disponibilidad</button>
                            </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
        <p>@_userId</p>
        <p>@Cita.UserId</p>
</div>
</EditForm>


@code{
    [Parameter]
    public int id { get; set; }
    public Cita Cita { get; set; } = new Cita();
    private string _authMessage;
    private string _userId;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();
    List<string> horas = new List<string>
        {
            "8:00 a.m.", "9:00 a.m.", "10:00 a.m.", "11:00 a.m.",
            "12:00 p.m.", "1:00 p.m.", "2:00 p.m.", "3:00 p.m.",
            "4:00 p.m.", "5:00 p.m.", "6:00 p.m."
        };
    public List<Servicio> servicios { get; set; } = new List<Servicio>();
    public List<Profesional> profesionales { get; set; } = new List<Profesional>();
    protected override async Task OnInitializedAsync()
    {
        await GetClaimsPrincipalData();
        servicios = await ServicioRepo.GetServicio();
        profesionales = await ProfesionalRepo.GetProfesional();
        Cita.UserId =  _userId;
        Cita.Estado = "Pendiente";
        Cita.Duracion = "60";

    }
    private async Task GetClaimsPrincipalData()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _userId = $"User Id: {user.FindFirst(c => c.Type == "sub")?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
    public async Task Guardar()
    {
        await CitaRepo.CreateCita(Cita);
        Nuevo();
        alert();
    }
    public void Nuevo()
    {
        Cita = new Cita();
    }
    public async void alert()
    {
        var res = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Exito",
                Text = "Guardado con exito!!!",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonText = "OK"

            });
    }
}